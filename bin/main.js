// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
(function ($hx_exports) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Fighter = function() {
	this._fighterChopTexture = [];
	this._fighterBreathTexture = [];
	var _g = 1;
	while(_g < 5) {
		var i = _g++;
		this._fighterBreathTexture.push(PIXI.Texture.fromFrame("breath" + i + ".png"));
	}
	var _g1 = 1;
	while(_g1 < 4) {
		var i1 = _g1++;
		this._fighterChopTexture.push(PIXI.Texture.fromFrame("chop" + i1 + ".png"));
	}
	this._fighter = new PIXI.extras.AnimatedSprite(this._fighterBreathTexture);
	this._fighter.animationSpeed = 0.1;
};
Fighter.__name__ = true;
Fighter.prototype = {
	getFighter: function() {
		return this._fighter;
	}
	,setBreathTexture: function() {
		this._fighter.textures = this._fighterBreathTexture;
		console.log(this._fighter);
		this._fighter.loop = true;
		this._fighter.play();
	}
	,setChopTexture: function(onComplete) {
		this._fighter.textures = this._fighterChopTexture;
		this._fighter.loop = false;
		this._fighter.onComplete = onComplete;
		this._fighter.play();
	}
};
var Scene = function() {
	PIXI.Container.call(this);
};
Scene.__name__ = true;
Scene.__super__ = PIXI.Container;
Scene.prototype = $extend(PIXI.Container.prototype,{
});
var GameScene = function() {
	Scene.call(this);
	GameScene._levels = [];
	this.setLevels();
	LoaderSingleton.getInstance().add("materials","materials/materials.json");
};
GameScene.__name__ = true;
GameScene.__super__ = Scene;
GameScene.prototype = $extend(Scene.prototype,{
	setLevels: function() {
		GameScene._levels.push({ name : "wood", threshold : 120});
		GameScene._levels.push({ name : "stone", threshold : 192});
		GameScene._levels.push({ name : "steel", threshold : 240});
		GameScene._levels.push({ name : "ruby", threshold : 360});
		GameScene._levels.push({ name : "diamond", threshold : 432});
	}
	,init: function() {
		window.document.addEventListener("keydown",$bind(this,this.handleKeyPress),true);
		var background = new PIXI.Sprite(PIXI.Texture.fromImage("assets/screens/main_screen.png"));
		this.addChild(background);
		var instructionsText = new PIXI.Sprite(PIXI.Texture.fromImage("assets/texts/instructions.png"));
		instructionsText.position.set(315,20);
		this.addChild(instructionsText);
		this._fighter = new Fighter();
		this._fighter.getFighter().anchor.set(0.5,1);
		this._fighter.getFighter().position.set(330,520);
		this.addChild(this._fighter.getFighter());
		this._material = new PIXI.Sprite();
		this._material.position.set(315,588);
		this._material.anchor.set(0.5,1);
		this.addChild(this._material);
		this._altarText = new PIXI.Sprite();
		this._altarText.position.set(315,690);
		this._altarText.anchor.set(0.5,1);
		this.addChild(this._altarText);
		this._bar = new PowerBar();
		this._bar.position.set(60,100);
		this.addChild(this._bar);
		this.loadLevel(0);
	}
	,loadLevel: function(level) {
		this._currentLevel = level;
		this._bar.setDifficulty(level);
		this.resetScene();
		MortalKombat.playing = true;
	}
	,resetScene: function() {
		this._material.texture = PIXI.Texture.fromFrame(GameScene._levels[this._currentLevel].name + ".png");
		this._altarText.texture = PIXI.Texture.fromFrame(GameScene._levels[this._currentLevel].name + "_word.png");
		this._bar.getBar().height = 0;
		this._bar.start();
		this._fighter.getFighter().play();
	}
	,handleKeyPress: function(e) {
		var _g = e.keyCode;
		if(_g == 40) {
			MortalKombat.playing = false;
			this._fighter.setChopTexture($bind(this,this.decideResult));
			this._bar.stop();
		}
	}
	,decideResult: function() {
		var _gthis = this;
		if(GameScene._levels[this._currentLevel].threshold < this._bar.getBar().height) {
			this._material.texture = PIXI.Texture.fromFrame(GameScene._levels[this._currentLevel].name + "_broken.png");
			this._altarText.texture = PIXI.Texture.fromImage("assets/texts/excellent.png");
			if(this._currentLevel < GameScene._levels.length) {
				haxe_Timer.delay(function() {
					_gthis.loadLevel(++_gthis._currentLevel);
				},3000);
			}
		}
	}
});
var LoaderSingleton = function() {
};
LoaderSingleton.__name__ = true;
LoaderSingleton.getInstance = function() {
	if(LoaderSingleton._instance == null) {
		LoaderSingleton._instance = new PIXI.loaders.Loader();
		LoaderSingleton._instance.baseUrl = "assets/";
	}
	return LoaderSingleton._instance;
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	new MortalKombat();
};
Math.__name__ = true;
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	_setDefaultValues: function() {
		this._animationFrameId = null;
		this.pixelRatio = 1;
		this.autoResize = true;
		this.transparent = false;
		this.antialias = false;
		this.forceFXAA = false;
		this.roundPixels = false;
		this.clearBeforeRender = true;
		this.preserveDrawingBuffer = false;
		this.backgroundColor = 16777215;
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.position = "static";
	}
	,start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width;
		renderingOptions.height = this.height;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.noWebGL = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,pauseRendering: function() {
		this.app.stop();
	}
	,resumeRendering: function() {
		this.app.start();
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,addStats: function() {
		if(window.Perf != null) {
			var renderer;
			var _g = this.app.renderer.type;
			switch(_g[1]) {
			case 0:
				renderer = "UNKNOWN";
				break;
			case 1:
				renderer = "WEBGL";
				break;
			case 2:
				renderer = "CANVAS";
				break;
			}
			new Perf().addInfo(renderer + " - " + this.pixelRatio);
		}
	}
};
var MortalKombat = function() {
	pixi_plugins_app_Application.call(this);
	this.position = "fixed";
	pixi_plugins_app_Application.prototype.start.call(this,"auto");
	LoaderSingleton.getInstance().add("fighter","player/fighter.json");
	this._gameScene = new GameScene();
	LoaderSingleton.getInstance().load($bind(this,this._onLoaded));
};
MortalKombat.__name__ = true;
MortalKombat.__super__ = pixi_plugins_app_Application;
MortalKombat.prototype = $extend(pixi_plugins_app_Application.prototype,{
	_onLoaded: function() {
		this._gameScene.init();
		this.stage.addChild(this._gameScene);
		MortalKombat.playing = true;
		this.animate();
	}
	,animate: function(time) {
		window.requestAnimationFrame($bind(this,this.animate));
		this.renderer.render(this.stage);
	}
});
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(($_=window,$bind($_,$_.requestAnimationFrame)) != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(($_=window,$bind($_,$_.cancelAnimationFrame)) != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
Perf.__name__ = true;
Perf.prototype = {
	_init: function() {
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_now: function() {
		if(this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null) {
			return this._perfObj.now();
		} else {
			return new Date().getTime();
		}
	}
	,_tick: function(val) {
		var time = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		var _g = this._pos;
		switch(_g) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck ? 48 : 32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,clearInfo: function() {
		if(this.info != null) {
			window.document.body.removeChild(this.info);
			this.info = null;
		}
	}
	,destroy: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
		this._perfObj = null;
		this._memoryObj = null;
		if(this.fps != null) {
			window.document.body.removeChild(this.fps);
			this.fps = null;
		}
		if(this.ms != null) {
			window.document.body.removeChild(this.ms);
			this.ms = null;
		}
		if(this.memory != null) {
			window.document.body.removeChild(this.memory);
			this.memory = null;
		}
		this.clearInfo();
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_cancelRAF: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
	}
};
var PowerBar = function() {
	PIXI.Container.call(this);
	this._bar = new PIXI.Graphics();
	this._bar.beginFill(16711168);
	this._bar.drawRect(0,0,80,1);
	this._bar.position.set(100,480);
	this._bar.rotation = Math.PI;
	this._bar.endFill();
	this.addChild(this._bar);
	var barBorder = new PIXI.Sprite(PIXI.Texture.fromImage("assets/power_bar/barBorder.png"));
	barBorder.anchor.set(1,1);
	barBorder.position.set(105,485);
	this.addChild(barBorder);
	this._threshold = new PIXI.Sprite(PIXI.Texture.fromImage("assets/power_bar/threshold.png"));
	this._threshold.anchor.set(0,0.5);
	this._threshold.position.x = 23;
	this.addChild(this._threshold);
	window.document.addEventListener("keyup",$bind(this,this.handleKeyPress),true);
};
PowerBar.__name__ = true;
PowerBar.__super__ = PIXI.Container;
PowerBar.prototype = $extend(PIXI.Container.prototype,{
	setDifficulty: function(level) {
		this._interval = new haxe_Timer(Math.floor(50 / ((level + 1) / 2)));
		this._threshold.position.y = 480 - GameScene._levels[level].threshold;
	}
	,start: function() {
		var _gthis = this;
		this._interval.run = function() {
			if(_gthis._bar.height > 0) {
				_gthis._bar.height -= 5;
			}
		};
	}
	,stop: function() {
		this._interval.stop();
	}
	,raiseBar: function() {
		if(this._bar.height + 25 < 480 && MortalKombat.playing) {
			this._bar.height += 25;
		}
	}
	,getBar: function() {
		return this._bar;
	}
	,handleKeyPress: function(e) {
		var _g = e.keyCode;
		if(_g == 32) {
			this.raiseBar();
		}
	}
});
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = ["Date"];
pixi_plugins_app_Application.AUTO = "auto";
pixi_plugins_app_Application.RECOMMENDED = "recommended";
pixi_plugins_app_Application.CANVAS = "canvas";
pixi_plugins_app_Application.WEBGL = "webgl";
pixi_plugins_app_Application.POSITION_STATIC = "static";
pixi_plugins_app_Application.POSITION_ABSOLUTE = "absolute";
pixi_plugins_app_Application.POSITION_FIXED = "fixed";
pixi_plugins_app_Application.POSITION_RELATIVE = "relative";
pixi_plugins_app_Application.POSITION_INITIAL = "initial";
pixi_plugins_app_Application.POSITION_INHERIT = "inherit";
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.TOP_LEFT = "TL";
Perf.TOP_RIGHT = "TR";
Perf.BOTTOM_LEFT = "BL";
Perf.BOTTOM_RIGHT = "BR";
Perf.DELAY_TIME = 4000;
PowerBar.maxHight = 480;
PowerBar.raiseTick = 25;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
